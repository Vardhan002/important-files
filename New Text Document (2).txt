<template>
  <div>
    <table>
      <thead>
        <tr>
          <th v-for="header in headers" :key="header.key">
            {{ header.title }}
          </th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="(item, index) in tableData" :key="index">
          <td>{{ item.class }}</td>
          <td>{{ item.orientation }}</td>
          <td>{{ item.section }}</td>
          <td>{{ item.student_count }}</td>
          <td>{{ item.ab_count }}</td>
          <td>
            <button @click="performAction(item)">Action</button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script setup>
import { ref } from 'vue';

// Define the headers
const headers = [
  {
    title: "Class",
    key: "class",
  },
  {
    title: "Orientation",
    key: "orientation",
  },
  {
    title: "Section",
    key: "section",
  },
  {
    title: "Student Count",
    key: "student_count",
  },
  {
    title: "Absentees count",
    key: "ab_count",
  },
  {
    title: "Action",
    key: "action",
  },
];

// Sample data for the table
const tableData = ref([
  {
    class: "10A",
    orientation: "Science",
    section: "A",
    student_count: 30,
    ab_count: 5,
  },
  {
    class: "10B",
    orientation: "Commerce",
    section: "B",
    student_count: 25,
    ab_count: 3,
  },
  // Add more data as needed
]);

const performAction = (item) => {
  // Define what happens when the action button is clicked
  console.log("Performing action on:", item);
};
</script>

<style scoped>
table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

th {
  background-color: #f2f2f2;
}
</style>





It looks like you're trying to render a table within a  `<template>`  block that uses Vuetify components like  `<VChip>`  and  `<VCol>` , while also dynamically generating a table from your  `mainData`  array. 

Here's how you can structure your code to ensure that the table is displayed correctly within the Vuetify framework, while also properly handling the  `VChip`  and  `VCol`  components.

### Updated Code
<template #item.status="{ item }">
  <VChip
    label
    size="small"
    class="text-transform: capitalize;"
    :color="attendanceStatus(item.raw.status)"
  >
    {{ item.raw.status }}
  </VChip>
  
  <VCol>
    <div>
      <table>
        <thead>
          <tr>
            <th v-for="header in headers" :key="header.key">
              {{ header.title }}
            </th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="(dataItem, index) in mainData" :key="dataItem.id">
            <td>{{ dataItem.class }}</td>
            <td>{{ dataItem.orentation }}</td>
            <td>{{ dataItem.section }}</td>
            <td>{{ dataItem.studentcount }}</td>
            <td>{{ dataItem.abcount }}</td>
            <td>
              <VBtn @click="performAction(dataItem)" color="primary">View Details</VBtn>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </VCol>
</template>
### Explanation

1. ** `<VChip>`  Component**:
   - The  `VChip`  component is used to display the attendance status. The  `color`  property is dynamically set based on the  `attendanceStatus`  function.

2. ** `<VCol>`  Component**:
   - The  `VCol`  component wraps the table to ensure proper layout and spacing according to Vuetify's grid system.

3. **Table Structure**:
   - The table is defined with a  `thead`  for headers and a  `tbody`  for data rows.
   - The  `v-for`  directive is used to loop through the  `headers`  array for table headers and the  `mainData`  array for table rows.
   - Each row has a button that triggers the  `performAction`  method when clicked, passing the current  `dataItem`  as an argument.

4. **Using  `VBtn` **:
   - The button is replaced with  `<VBtn>`  to maintain consistency with Vuetify's design language. You can specify additional properties like  `color`  to style the button.

### Additional Notes
- Ensure that  `attendanceStatus` ,  `headers` , and  `mainData`  are defined in the script section of your Vue component.
- Adjust any styling or classes as needed to fit your design requirements.
- If you're using Vuetify's grid system, consider wrapping the table in a  `<VContainer>`  or  `<VRow>`  if necessary for layout purposes.














<template>
  <v-container>
    <v-dialog v-model="showDialog" max-width="800px">
      <v-card>
        <v-card-title>
          <span class="text-h5">Branch Absentees</span>
          <v-spacer></v-spacer>
          <v-btn v-if="absenteesData.length > 0" color="blue" @click="exportData">Export</v-btn>
        </v-card-title>
        <v-card-text>
          <v-table>
            <thead>
              <tr>
                <th>Name</th>
                <th>Admission Number</th>
                <th>Class</th>
                <th>Orientation</th>
                <th>Section</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="(student, ind) in absenteesData" :key="ind">
                <td>{{ student.student_name }}</td>
                <td>{{ student.admission_number }}</td>
                <td>{{ student.class }}</td>
                <td>{{ student.orientation }}</td>
                <td>{{ student.section }}</td>
              </tr>
            </tbody>
          </v-table>
        </v-card-text>
        <v-card-actions>
          <v-btn @click="showDialog = false">Close</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>

    <v-row>
      <v-col>
        <v-card>
          <v-card-title>Total Students</v-card-title>
          <v-card-text>
            <h4>{{ total_students }}</h4>
          </v-card-text>
        </v-card>
      </v-col>
      <v-col>
        <v-card>
          <v-card-title>Absent Students</v-card-title>
          <v-card-text @click="showDialog = true">
            <h4>{{ absentees_count }}</h4>
          </v-card-text>
        </v-card>
      </v-col>
      <v-col>
        <v-card>
          <v-card-title>Present Students</v-card-title>
          <v-card-text>
            <h4>{{ present_students }}</h4>
          </v-card-text>
        </v-card>
      </v-col>
      <v-col>
        <v-card>
          <v-card-title>Date</v-card-title>
          <v-card-text>
            <h4>{{ date }}</h4>
            <v-btn v-if="remarks && cancelRemarksPermission" @click="showCancelRemarks = true" color="purple">Cancel Remarks</v-btn>
            <v-btn @click="show = true" color="purple">Remarks</v-btn>
          </v-card-text>
        </v-card>
      </v-col>
    </v-row>

    <v-dialog v-model="show" max-width="640px">
      <v-card>
        <v-card-title>Enter Remarks</v-card-title>
        <v-card-text>
          <v-text-field v-model="startDate" label="Start Date" type="date" :min="today" required></v-text-field>
          <v-text-field v-model="endDate" label="End Date" type="date" :min="today" required></v-text-field>
          <v-textarea v-model="remarks" label="Remarks" rows="10" required></v-textarea>
          <p class="text-yellow-600 font-semibold">Note: Remarks can only be added for holidays...</p>
        </v-card-text>
        <v-card-actions>
          <v-btn @click="clearRemarks" color="grey">Cancel</v-btn>
          <v-btn @click="submitRemarks" color="blue">Submit</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>

    <v-dialog v-model="showCancelRemarks" max-width="400px">
      <v-card>
        <v-card-title>Cancel Remarks</v-card-title>
        <v-card-text>Do you really want to cancel the remarks?</v-card-text>
        <v-card-actions>
          <v-btn @click="showCancelRemarks = false" color="red">Cancel</v-btn>
          <v-btn @click="cancelRemarks" color="blue">Cancel Remarks</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
  </v-container>
</template>

<script setup>
import { ref, onMounted, computed } from "vue";
import axios from "axios";
import { useToast } from "vue-toast-notification";
import "vue-toast-notification/dist/theme-bootstrap.css";

const toast = useToast();
const date = ref(new Date().toLocaleDateString("en-CA"));
const today = ref(new Date().toLocaleDateString("en-CA"));
const total_students = ref(0);
const absentees_count = ref(0);
const present_students = ref(0);
const showDialog = ref(false);
const show = ref(false);
const remarks = ref(null);
const startDate = ref(null);
const endDate = ref(null);
const absentees = ref([]);
const cancelRemarksPermission = ref(false);
const showCancelRemarks = ref(false);
const admURL = inject("admURL");

const permission = async () => {
  // Your existing permission logic
};

const submitRemarks = async () => {
  // Your existing submit remarks logic
};

const clearRemarks = () => {
  show.value = false;
  remarks.value = undefined;
  startDate.value = undefined;
  endDate.value = undefined;
};

const cancelRemarks = async () => {
  // Your existing cancel remarks logic
};

const exportData = () => {
  // Your existing export data logic
};

onMounted(() => {
  permission();
});
</script>




vue
<script setup>
// Import necessary libraries and components
import { ref, computed, watchEffect } from 'vue';
import { useRouter } from 'vue-router';
import { storeToRefs } from 'pinia';
import { useRouteStore } from '@/router/routeStore';
import { useNavSearchBarStore } from '@/stores/navBarStore';
import axios from '@axios';
import AppTextarea from '@/@core/components/app-form-elements/AppTextarea.vue';
import DialogCloseBtn from '@/components/DialogCloseBtn.vue';

// Define props
const props = defineProps({
  date: {
    type: String,
    required: true,
  },
});

// Reactive references
const absent = ref('');
const admission_number = ref('');
const showDialog = ref(false);
const isSecondModalOpen = ref(false);
const bulkAttendanceDialogBoxVisible = ref(false);
const remarksDialogBoxVisible = ref(false);
const AbsentDialogBoxVisible = ref(false);
const confirmationAdmission = ref([]);

// Function to handle actions on the student attendance data
const performAction = (item) => {
  // Logic to perform an action with the selected item (e.g., view details)
  console.log('Performing action on:', item);
};

// Function to submit valid absentees
const submitAbsentees = () => {
  // Logic to submit the valid absentees
  console.log('Submitting absentees:', absent.value);
};

// Function to fetch valid admission numbers
const fetchValidAdmissionNumbers = (admissionNumbers) => {
  // Logic to fetch valid admission numbers from the server or validate them
  // This is just a placeholder; the actual implementation would involve an API call.
  return admissionNumbers.map(num => ({ admission_number: num, valid: true }));
};

// Watcher for the date prop to trigger data fetching
watch(
  () => props.date,
  () => {
    fetchItems();
  }
);

// Function to fetch items (e.g., attendance records)
const fetchItems = () => {
  // Logic to fetch attendance data based on the date
  console.log('Fetching items for date:', props.date);
};

// Function to handle the submission of remarks
const handleRemarksSubmit = () => {
  // Logic to handle the submission of remarks
  console.log('Submitting remarks:', holiday.value);
};

// Function to handle the confirmation of absent students
const handleConfirmAbsentees = () => {
  // Logic to confirm the absent students
  console.log('Confirming absent students:', absent.value);
};

// Initialize the component with necessary data
const initData = () => {
  // Initialize data if needed
  console.log('Initializing component data...');
};

// Call the init function
initData();
</script>

<template>
  <VRow class="mt-3 mb-5" v-if="attendanceData">
    <!-- Attendance summary cards -->
    <VCol cols="12" sm="6" lg="3">
      <router-link :to="{ name: 'admissions-studentattendanceregister' }">
        <VCard>
          <VCardText class="d-flex justify-space-between">
            <div>
              <span>Attendance</span>
              <div class="d-flex align-center gap-2 my-1">
                <h6 class="text-h4">{{ attendanceData.total_students }}</h6>
              </div>
              <div>&nbsp;</div>
            </div>
            <VAvatar rounded variant="tonal" color="info" icon="fa6-solid:users-line" />
          </VCardText>
        </VCard>
      </router-link>
    </VCol>
    <!-- Other attendance summary cards... -->
  </VRow>

  <!-- Bulk Attendance Dialog -->
  <VDialog v-model="bulkAttendanceDialogBoxVisible" max-width="600" max-height="1000">
    <DialogCloseBtn @click="bulkAttendanceDialogBoxVisible = false" />
    <VForm ref="refVFormPopup" class="mt-6" @submit.prevent="onSubmitModelBox">
      <VCard title="Bulk Attendance">
        <VCardText>
          <VRow>
            <VCol cols="12" sm="6" md="12">
              <AppTextarea v-model="admission_numbers" label="Enter Absent Admission Numbers"
                placeholder="Example:SCS123456,SCS654321" :rules="[requiredValidator, admissionNumberValidator]" />
            </VCol>
          </VRow>
        </VCardText>
        <VCardText class="d-flex justify-end flex-wrap gap-3">
          <VBtn variant="tonal" color="secondary" @click="bulkAttendanceDialogBoxVisible = false">
            Close
          </VBtn>
          <VBtn @click="confirmAbsentDialogBox">Submit</VBtn>
        </VCardText>
      </VCard>
    </VForm>
  </VDialog>

  <!-- Remarks Dialog -->
  <VDialog v-model="remarksDialogBoxVisible" max-width="600" max-height="1000">
    <DialogCloseBtn @click="remarksDialogBoxVisible = false" />
    <VForm ref="refVFormPopup" class="mt-6" @submit.prevent="handleRemarksSubmit">
      <VCard title="Enter Remarks">
        <VCardText>
          <VRow>
            <VCol>
              <AppDateTimePicker v-model="startDate" :min="startDate" label="Start Date" placeholder="Select Start Date"
                :rules="[requiredValidator]" />
            </VCol>
            <VCol>
              <AppDateTimePicker v-model="endDate" :min="endDate" label="End Date" placeholder="Select End Date"
                :rules="[requiredValidator]" />
            </VCol>
            <VCol cols="12" sm="6" md="12">
              <AppTextarea v-model="holiday" label="Enter Remarks" placeholder="Enter Holiday(s) Description"
                :rules="[requiredValidator]" />
            </VCol>
            <VCol>
              <h2>Note:</h2>
              <p>Remarks can only be added for holidays. Once a remark is added for a date(s), the submitted/filled attendance data will be lost and cannot be reverted.</p>
            </VCol>
          </VRow>
        </VCardText>
        <VCardText class="d-flex justify-end flex-wrap gap-3">
          <VBtn variant="tonal" color="secondary" @click="remarksDialogBoxVisible = false">
            Close
          </VBtn>
          <VBtn color="warning" @click="handleRemarksSubmit">Submit</VBtn>
        </VCardText>
      </VCard>
    </VForm>
  </VDialog>

  <!-- Confirm Absentees Dialog -->
  <VDialog v-model="AbsentDialogBoxVisible" max-width="600" max-height="1000">
    <DialogCloseBtn @click="AbsentDialogBoxVisible = false" />
    <VForm ref="refVFormPopup" class="mt-6" @submit.prevent="handleConfirmAbsentees">
      <VCard title="Confirm Absentees">
        <VCardText>
          <VRow>
            <VCol cols="12" sm="6" md="12">
              <AppTextarea v-model="absent" label="Invalid Absentees Count" :rules="[requiredValidator]" />
              <div>&nbsp;</div>
              <h3>Note</h3>
              <AppTextarea v-model="absent" label="Valid Absentees Count" />
              <VCol>
                <em>Entering an incorrect Student ID or a Student ID from a different branch will result in an error</em>
              </VCol>
            </VCol>
          </VRow>
        </VCardText>
        <VCardText class="d-flex justify-end flex-wrap gap-3">
          <VBtn variant="tonal" color="secondary" @click="AbsentDialogBoxVisible = false">
            Close
          </VBtn>
          <VBtn @click="handleConfirmAbsentees">Submit</VBtn>
        </VCardText>
      </VCard>
    </VForm>
  </VDialog>
</template>














watch(
  () => globalVariables.value.academicYear,
  (newV) => {
    if (newV) {
      moduleData.value.academic_year_id = newV;
      moduleApplicationData.value = [];
      moduleData.value.pro_master_id = undefined;
      fetchAcademicYear(moduleData.value.academic_year_id);
    } else {
      moduleData.value.academic_year_id = undefined;
      moduleData.value.academic_year_id1 = undefined;
    }
    moduleApplicationData.value = [];
    searchIndex.value = false;
    toggleUnSelectAllChecked();
  }
);

onMounted(() => {
  if (globalVariables.value.zone) {
    fetchbranch(globalVariables.value.zone);
    // fetchAcademicYearData();
  } else {
    fetchBranches();
  }

  if (globalVariables.value.academicYear) {
    moduleData.value.academic_year_id = globalVariables.value.academicYear;
    fetchAcademicYear(moduleData.value.academic_year_id);
  } else {
    moduleData.value.academic_year_id = undefined;
    moduleData.value.academic_year_id1 = undefined;
  }
  searchIndex.value = false;
  // fetchAcademicYearData();
});






watch(
  () => globalVariables.value.academicYear,
  (newV) => {
    if (newV) {
      moduleData.value.academic_year_id = newV;
      moduleApplicationData.value = [];
      moduleData.value.pro_master_id = undefined;
      fetchAcademicYear(moduleData.value.academic_year_id);
    } else {
      moduleData.value.academic_year_id = undefined;
      moduleData.value.academic_year_id1 = undefined;
    }
    moduleApplicationData.value = [];
    searchIndex.value = false;
    toggleUnSelectAllChecked();
  }
);

onMounted(() => {
  if (globalVariables.value.zone) {
    fetchbranch(globalVariables.value.zone);
  } else {
    fetchBranches();
  }

  if (globalVariables.value.academicYear) {
    moduleData.value.academic_year_id = globalVariables.value.academicYear;
    fetchAcademicYear(moduleData.value.academic_year_id);
  } else {
    moduleData.value.academic_year_id = undefined;
    moduleData.value.academic_year_id1 = undefined;
  }

  if (globalVariables.value.branch) {
    moduleData.value.branch_id = globalVariables.value.branch;
  } else {
    moduleData.value.branch_id = undefined;
  }

  searchIndex.value = false;
  // fetchAcademicYearData();
});

